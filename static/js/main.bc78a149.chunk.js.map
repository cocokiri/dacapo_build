{"version":3,"sources":["endpoints.js","components/auth.js","components/gqlRequest.js","apis/query.js","components/AuthMonitor.js","apis/api.js","components/account/LoginPage.js","components/account/RegistrationPage.js","components/Card.js","utils.js","apis/mutations.js","components/styled/styles.js","components/ReviewThread.js","components/Reviews.js","components/styled/Header.js","components/styled/Tag.js","apis/Querier.js","components/GroupView.js","components/styled/Button.js","components/Groups.js","components/UserView.js","components/Nav.js","components/account/ForgotPassword.js","components/account/AccountDetails.js","components/account/AccountPage.js","components/About.js","components/CreateGroup.js","index.js"],"names":["graphql_server","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","auth","window","gqlRequest","_callee","token","graphQLClient","_args","arguments","regenerator_default","a","wrap","_context","prev","next","currentUser","getIdToken","sent","GraphQLClient","headers","Authorization","concat","console","log","abrupt","request","apply","stop","this","GET_REVIEWS","gql","_templateObject","GET_REVIEWS_FOR_USERGROUPS","_templateObject2","_templateObject3","GET_REVIEWS_FOR_TARGET","_templateObject4","GET_GROUPS","_templateObject5","GET_USER","_templateObject6","_templateObject7","GET_USER_BY_NAME","_templateObject8","GET_GROUP_BY_NAME","_templateObject9","_templateObject10","getGroupByName","name","getUserByName","getReviewsForUserGroups","getReviews","getGroups","authStati","signed_out","signed_in_unverified","signed_in_verfied","AuthMonitor","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","authState","user","uid","idToken","sessionStorage","getItem","lupa_user","JSON","parse","that","assertThisInitialized","setInterval","onAuthStateChanged","_ref","asyncToGenerator","mark","setState","getUser","emailVerified","clear","_x","fibauid","setItem","stringify","Container","api","signOut","signIn","username","password","signInWithEmailAndPassword","register","Promise","resolve","reject","createUserWithEmailAndPassword","then","response","sendEmailVerification","catch","error","resendEmailVerification","sendPasswordResetEmail","email","LoginMeta","withFormik","mapPropsToValues","validationSchema","Yup","shape","required","min","handleSubmit","_ref2","_ref3","resetForm","setErrors","setSubmitting","res","err","values","errors","touched","isSubmitting","react_default","createElement","Fragment","className","formik_esm","type","placeholder","title","disabled","createUser","mutation","RegistrationPage_templateObject","getName","query","RegistrationPage_templateObject2","RegistrationMeta","matches","_handleSubmit","data","userByName","submitter","t0","message","t1","_x2","value","toLowerCase","Card","info","children","links","approute","timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","countNested","obj","prop","reduce","accum","length","urlpretty","target","split","b","CREATE_REVIEW_MUTATION","mutations_templateObject","DELETE_REVIEW","mutations_templateObject2","FOLLOW_GROUP","mutations_templateObject3","mutations_templateObject4","UNFOLLOW_GROUP","mutations_templateObject5","CREATE_GROUP_MUTATION","mutations_templateObject6","createGroup","description","followGroup","group","unfollowGroup","createReview","targetType","subtle_button","cursor","fontStyle","fontSize","textDecoration","color","infoStyle","padding","btn_pink","background","width","btn_green","ReviewThread","review","_ref$showmore","showmore","_useState","useState","_useState2","slicedToArray","expanded","setExpanded","_useState3","_useState4","isPreview","setIsPreview","totalcomments","key","id","onClick","author","emoji","isNaN","String","fromCodePoint","style","updatedAt","marginLeft","borderRadius","margin","groups","map","g","Commenter","targetId","comments","comment","ReviewThread_Comment","text","reply","_ref2$text","_useState5","_useState6","typing","setTyping","_useState7","_useState8","setComment","onChange","ev","cols","rows","Comment","href","fontWeight","ReviewList","now","reviews","fullPreview","Header","styled","h1","Header_templateObject","p","primary","Tag","div","Tag_templateObject","Querier","_ref$prop","loading","setLoading","setError","ee","setData","_useState9","_useState10","done","setDone","_fetcher","useEffect","fetcher","Group","match","_ref$preview","preview","params","styled_Header","GroupDetails","details","Reviews_ReviewList","followers","f","styled_Tag","location","replace","Button","button","Button_templateObject","sortGroupListingByRole_mutate","userRoles","forEach","find","role","membership","Groups","roles","styled_Button","history","push","display","flexWrap","sort","acc","val","UserView","variables","follows","Nav","Link","to","ForgotPasswordMeta","setValues","AccountDetails","AccountPage","stage","setStage","choice","account","login","account_RegistrationPage","account_LoginPage","account_ForgotPassword","About","CreateGroupMeta","max","groupByName","trim","__webpack_require__","d","__webpack_exports__","src_history","createBrowserHistory","ReactDOM","render","Router","unstated_es","Switch","Route","exact","path","component","props","assign","CreateGroup","RegistrationPage","document","getElementById"],"mappings":"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","file":"static/js/main.bc78a149.chunk.js","sourcesContent":["const graphql_server = \"http://localhost:4000\"\n\nexport  {graphql_server}","import firebase from \"firebase/app\";\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyC9CAxlZsQ7jzHBl5YkbUHY0zGxCwhq-cc\",\n    authDomain: \"wisdom-c02f4.firebaseapp.com\",\n    databaseURL: \"https://wisdom-c02f4.firebaseio.com\",\n    projectId: \"wisdom-c02f4\",\n    storageBucket: \"wisdom-c02f4.appspot.com\",\n    messagingSenderId: \"1078468381731\"\n};\n// Initialize Firebase\n\nfirebase.initializeApp(config);\n\nconst auth = firebase.auth();\nwindow.auth = auth;\n\nexport {auth};\n","import {auth} from \"./auth\";\nimport {GraphQLClient} from \"graphql-request/dist/src/index\";\nimport {graphql_server} from \"../endpoints\";\n\nexport {gqlRequest};\n\nasync function gqlRequest(...options) {\n    const token = await auth.currentUser.getIdToken()\n    const graphQLClient = new GraphQLClient(graphql_server, {\n        headers: {\n            Authorization: `Bearer ${token}`,\n        },\n    })\n\n    console.log('gql request !')\n\n    return graphQLClient.request(...options)\n}","// import {gql} from \"apollo-boost\";\nimport gql from 'graphql-tag';\nimport {gqlRequest} from \"../components/gqlRequest\";\n\n\n//TODO figure out how graphql ...fragments work\n\n//TODO: reviews should have tags => for groups\nconst GET_REVIEWS = gql`\n    query reviews($userId:String, $username: String) {\n        reviews (userId: $userId, username: $username) {\n            id\n            author {\n                id\n                name\n            }\n            description\n            targetType\n            target\n            comments {\n                id\n                author {\n                    id\n                    name\n                }\n                emoji\n                updatedAt\n                description\n                target\n                targetType\n                comments {\n                    id\n                    author {\n                        id\n                        name\n                    }\n                    updatedAt\n                    description\n                    target\n                    targetType\n                }\n            }\n            emoji\n            groups {\n                name\n            }\n            updatedAt\n            title\n        }\n    }\n`\n\n// const fieldsOnCar = gql`\n//     fragment defaultReviewFields on Review {\n//         id\n//         name\n//     }\n// `;\n\nconst GET_REVIEWS_FOR_GROUPS = gql`\n    query reviewsForGroups($groups: [String!]) {\n        reviewsForGroups(group: $groups) {\n            id\n            author {\n                id\n                name\n            }\n            description\n            targetType\n            target\n            comments {\n                id\n                author {\n                    id\n                    name\n                }\n            }\n        }\n    }\n`\n\nconst GET_REVIEWS_FOR_USERGROUPS = gql`\n    query reviewsForUserGroups {\n        reviewsForUserGroups {\n            id\n            author {\n                id\n                name\n            }\n            description\n            targetType\n            target\n            comments {\n                id\n                author {\n                    id\n                    name\n                }\n                emoji\n                updatedAt\n                description\n                target\n                targetType\n                comments {\n                    id\n                    author {\n                        id\n                        name\n                    }\n                    updatedAt\n                    description\n                    target\n                    targetType\n                }\n            }\n            emoji\n            groups {\n                name\n            }\n            updatedAt\n            title\n        }\n    }\n`\n\nconst GET_REVIEWS_FOR_TARGET = gql`\n    query reviewsForTaret($target:String!) {\n        reviewsForTarget(target: $target) {\n            id\n            author {\n                id\n                name\n            }\n            description\n            targetType\n            target\n            comments {\n                id\n                author {\n                    id\n                    name\n                }\n                emoji\n                updatedAt\n                description\n                target\n                targetType\n                comments {\n                    id\n                    author {\n                        id\n                        name\n                    }\n                    updatedAt\n                    description\n                    target\n                    targetType\n                }\n            }\n            emoji\n            groups {\n                name\n            }\n            updatedAt\n            title\n        }\n    }\n`\n\nconst GET_GROUPS = gql`\n    query groups($userId: String) {\n        groups (userId: $userId) {\n            id\n            name\n            description\n            reviews {\n                id\n                author {\n                    id\n                    name\n                }\n                description\n                targetType\n                target\n                comments {\n                    id\n                    author {\n                        id\n                        name\n                    }\n                    emoji\n                    updatedAt\n                    description\n                    target\n                    targetType\n                    comments {\n                        id\n                        author {\n                            id\n                            name\n                        }\n                        updatedAt\n                        description\n                        target\n                        targetType\n                    }\n                }\n            }\n            followers {\n                name\n            }\n        }\n    }\n`;\n\nconst GET_ROLES_FOR_USER = gql`\n    query getRoles($userId: String) {\n        getRoles(userId: $userId) {\n            user {\n                id\n                name\n            }\n            role\n            group {\n                name\n                id\n            }\n        }\n    }\n`\n\n\nconst GET_USER = gql`\n    query user($fibauid: String!) {\n        user(fibauid: $fibauid) {\n            id\n            name\n\n            roles {\n                role\n                group {\n                    id\n                    name\n                    description\n                }\n            }\n            description\n\n            reviews {\n                id\n                author {\n                    name\n                    id\n                }\n                target\n                targetType\n                updatedAt\n                createdAt\n                emoji\n                description\n            }\n        }\n    }\n`\nconst GET_USER_BY_NAME = gql`\n    query userByName($name: String!) {\n        userByName(name: $name) {\n            id\n            name\n            follows{\n                name\n                followers {\n                    name\n                }\n            }\n            description\n\n            reviews {\n                id\n                author {\n                    name\n                    id\n                }\n                target\n                targetType\n                updatedAt\n                createdAt\n                emoji\n                description\n            }\n        }\n    }\n`;\n\nconst GET_GROUP = gql`\n    query group($groupId: String) {\n        group(groupId: $groupId) {\n            id\n            name\n            createdAt\n            reviews {\n                id\n                author {\n                    id\n                    name\n                }\n                description\n                targetType\n                target\n                comments {\n                    id\n                    author {\n                        id\n                        name\n                    }\n                    emoji\n                    updatedAt\n                    description\n                    target\n                    targetType\n                    comments {\n                        id\n                        author {\n                            id\n                            name\n                        }\n                        updatedAt\n                        description\n                        target\n                        targetType\n                    }\n                }\n            }\n            followers {\n                name\n                id\n            }\n        }\n    }\n`;\n\nconst GET_GROUP_BY_NAME = gql`\n    query getGroup($name: String!){\n        groupByName(name:$name)\n        {\n            id\n            name\n            createdAt\n            reviews {\n                id\n                author {\n                    id\n                    name\n                }\n                description\n                targetType\n                target\n                comments {\n                    id\n                    author {\n                        id\n                        name\n                    }\n                    emoji\n                    updatedAt\n                    description\n                    target\n                    targetType\n                    comments {\n                        id\n                        author {\n                            id\n                            name\n                        }\n                        updatedAt\n                        description\n                        target\n                        targetType\n                    }\n                }\n                emoji\n                groups {\n                    name\n                }\n                updatedAt\n                title\n            }\n            followers {\n                name\n                id\n            }\n        }\n    }`\n\nconst getGroupByName = (name) => gqlRequest(GET_GROUP_BY_NAME, {name});\nconst getUserByName = (name) => gqlRequest(GET_USER_BY_NAME, {name});\nconst getReviewsForUserGroups = () => gqlRequest(GET_REVIEWS_FOR_USERGROUPS, {});\nconst getReviewsForTarget = (target) => gqlRequest(GET_REVIEWS_FOR_TARGET, {target});\nconst getReviews = () => gqlRequest(GET_REVIEWS, {});\nconst getGroups = () => gqlRequest(GET_GROUPS, {});\n\n\nexport {\n    getReviewsForTarget,\n    getReviews,\n    getUserByName,\n    getGroups,\n    getReviewsForUserGroups,\n    getGroupByName,\n    GET_REVIEWS_FOR_TARGET,\n    GET_REVIEWS,\n    GET_ROLES_FOR_USER,\n    GET_GROUP_BY_NAME,\n    GET_USER,\n    GET_USER_BY_NAME,\n    GET_GROUPS,\n    GET_GROUP\n};\n","import {Container} from \"unstated\";\nimport {graphql_server} from \"../endpoints\";\nimport {GET_USER} from \"../apis/query\";\nimport {request} from \"graphql-request\";\nimport {auth} from \"./auth\";\n\nconst getUser = (fibauid) => request(graphql_server, GET_USER, {fibauid})\n\n//just for debugging\n\n//the plural of status is stati?\nconst authStati = {\n    signed_out: 0,\n    signed_in_unverified: 1,\n    signed_in_verfied: 2\n};\n//lifecycle events won't work here since the class is never instantiated with Unstated.\n//but we still have access to it's state\nexport default class AuthMonitor extends Container {\n    constructor() {\n        super();\n        this.state = {\n            // auth: firebase.auth(),\n            authState: authStati.signed_out,\n            user: null,\n            uid: null,\n            idToken: sessionStorage.getItem(\"lupa_token\"),\n            lupa_user: JSON.parse(sessionStorage.getItem(\"lupa_user\"))\n        };\n        const that = this\n        setInterval(() => that.state.user ? that.getIdToken(that.state.user) : null, 12 * 60 * 1000)\n        auth.onAuthStateChanged(async user => {\n            if (!user || user.uid === this.state.uid) {\n                return\n            }\n\n            this.setState({user});\n            if (user) {\n                console.log(\"user\", user, \"user\");\n                const idToken = await this.getIdToken(user)\n                const lupa_user = await this.getUser(user.uid)\n\n                this.setState({\n                    idToken, lupa_user, user, uid: user.uid,\n                    authState: (user.emailVerified\n                        ? authStati.signed_in_verfied\n                        : authStati.signed_in_unverified)\n                })\n\n                if (this.state.authState < 1) {\n                    sessionStorage.clear();\n                }\n\n            } else {\n                this.setState({authState: authStati.signed_out});\n            }\n\n\n        })\n    }\n\n    async getUser(uid) {\n        const {user} = await getUser(uid);\n        console.log(\"luparillo\", user);\n        sessionStorage.setItem(\"lupa_user\", JSON.stringify(user))\n        return user\n    }\n\n    async getIdToken(user) {\n        const idToken = await user.getIdToken();\n        sessionStorage.setItem(\"lupa_token\", idToken)\n\n        return idToken\n\n    }\n}\n\n/* export default function AuthMonitor () {\n  const [authStatus, setAuthStatus] = useState(authStati.signed_out)\n\n  useEffect(() => {\n\n  })\n  return null\n} */\n","import firebase from \"firebase/app\";\n// import * as moment from \"moment\";\n\n//TODO\n/** createReview createGroup\n createComment (BE: connect with Review, connect with User)\n\n **/\n\nconst api = {\n  signOut: () => firebase.auth().signOut(),\n  signIn: (username, password) =>\n    firebase.auth().signInWithEmailAndPassword(username, password),\n  register: (username, password) =>\n    new Promise(function(resolve, reject) {\n      return firebase\n        .auth()\n        .createUserWithEmailAndPassword(username, password)\n        .then(response => {\n          resolve(response.user);\n          firebase.auth().currentUser.sendEmailVerification();\n        })\n        .catch(error => {\n          reject(error);\n          throw error;\n        });\n    }),\n\n  resendEmailVerification: () =>\n    firebase.auth().currentUser.sendEmailVerification(),\n  sendPasswordResetEmail: email => firebase.auth().sendPasswordResetEmail(email)\n};\n\nexport default api;\n","import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { Form, Field, withFormik } from \"formik\";\nimport api from \"../../apis/api\";\n\n// import \"./account.css\";\n\nconst LoginPage = ({ values, errors, touched, isSubmitting }) => (\n  <>\n    <div className=\"title\">Sign In</div>\n    <Form className=\"login-form\">\n      <div className=\"credentials\">\n        <Field type=\"email\" name=\"email\" placeholder={\"email\"} />\n        {touched.email && errors.email && <p>{errors.email}</p>}\n\n        <Field type=\"password\" name=\"password\" placeholder={\"password\"} />\n        {touched.password && errors.password && <p>{errors.password}</p>}\n      </div>\n      <div className=\"login-links\" />\n      {errors.api && <p>{`There was an error: ${errors.api}`}</p>}\n\n      <button\n        type=\"submit\"\n        title=\"Sign in\"\n        disabled={!values.email || !values.password || isSubmitting}\n      >\n        Log In\n      </button>\n    </Form>\n  </>\n);\n\nconst LoginMeta = withFormik({\n  mapPropsToValues: () => ({\n    email: \"\",\n    password: \"\"\n  }),\n  validationSchema: Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email not valid\")\n      .required(\"Email is required\"),\n    password: Yup.string()\n      .required(\"A Password would be a good idea\")\n      .min(6, \"Password is too short - should be 6 chars minimum.\")\n  }),\n  handleSubmit(\n    { email, password } /* form values */,\n    { resetForm, setErrors, setSubmitting } /* formikExtras */\n  ) {\n    console.log(\"here account\");\n    api\n      .signIn(email, password)\n      .then(res => setSubmitting(false))\n      .catch(err => {\n        resetForm();\n        setErrors({ api: err })\n      });\n  }\n});\n\nexport default LoginMeta(LoginPage);\n","import React from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport api from \"../../apis/api\";\nimport { request } from \"graphql-request\";\nimport { graphql_server } from \"../../endpoints\";\nimport gql from \"graphql-tag\";\n\nconst createUser = (name, email, fibauid) => {\n  const mutation = gql`\n    mutation createUser{\n        createUser(name:\"${name}\", email:\"${email}\", fibauid: \"${fibauid}\")\n        {\n            id\n            name\n        }\n    }\n  `;\n  return request(graphql_server, mutation);\n};\n\nconst getName = name => {\n  const query = gql`\n    query getName($name: String!){\n        userByName(name:$name)\n        {\n            name\n            id\n        }\n    }`;\n  return request(graphql_server, query, { name });\n};\n\nconst RegistrationPage = ({ touched, values, errors }) => {\n  const { name, email, password } = values;\n  return <>\n      <div className=\"title\">Register</div>\n      <Form className=\"login-form\">\n        <div className=\"credentials\">\n          <Field name=\"name\" value={name.toLowerCase()} placeholder={\"displayname\"} />\n          {errors.name && <div>{errors.name}</div>}\n\n          <Field name=\"email\" value={email} placeholder={\"Email Address\"} />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n\n          <Field name=\"password\" type=\"password\" placeholder={\"password\"} />\n          {touched.password && errors.password && <div>\n              {errors.password}\n            </div>}\n        </div>\n        <div className=\"error\" />\n        {errors.submitter && <p>{errors.submitter}</p>}\n        {errors.api && <p>{`Error while registering : ${errors.api}`}</p>}\n\n        <button type=\"submit\" title=\"Sign up\" disabled={!email || !password || !name}>\n          Submit\n        </button>\n      </Form>\n    </>;\n};\nconst RegistrationMeta = withFormik({\n  mapPropsToValues: () => ({\n    name: \"\",\n    email: \"\",\n    password: \"\"\n    //Login + passwordRepeated = Register\n  }),\n  validationSchema: Yup.object().shape({\n    name: Yup.string()\n      .required(\"You need a display name\")\n      .min(3, \"minimum 3 chars\")\n      .matches(/^([a-z\\d]+_)*[a-z\\d]+$/i, \"no weird signs pls\"),\n    email: Yup.string()\n      .email(\"Email not valid\")\n      .required(\"Email is required\"),\n    password: Yup.string()\n      .required(\"A Password would be a good idea\")\n      .min(6, \"Password is too short - should be 6 chars minimum.\")\n  }),\n  async handleSubmit(\n    { email, password, name } /* form values */,\n    { resetForm, setErrors, setSubmitting } /* formikExtras */\n  ) {\n    try {\n      const data = await getName(name);\n      console.log(data, \"getname\");\n      if (data.userByName) {\n        setErrors({ submitter: \"Displayname is taken :( \" });\n        return;\n      }\n    } catch (error) {\n      setErrors({ submitter: error.message });\n      return;\n    }\n\n    try {\n      const user = await api.register(email, password);\n      console.log(\"user fiba\", user);\n      const { uid } = user;\n      const data = await createUser(name, email, uid);\n    } catch (error) {\n      setErrors({ submitter: error.message });\n      resetForm();\n    }\n    setErrors({ submitter: \"success!\" });\n    setSubmitting(false);\n  }\n});\n\nexport default RegistrationMeta(RegistrationPage);\n","import React, {useState} from 'react'\nimport './card.css'\n\nexport default function Card({info, children}) {\n    return  <div className={'card'}>\n        {children}\n    </div>\n}","import {useEffect, useState} from \"react\";\n\nfunction timeDifference(current, previous) {\n  const milliSecondsPerMinute = 60 * 1000;\n  const milliSecondsPerHour = milliSecondsPerMinute * 60;\n  const milliSecondsPerDay = milliSecondsPerHour * 24;\n  const milliSecondsPerMonth = milliSecondsPerDay * 30;\n  const milliSecondsPerYear = milliSecondsPerDay * 365;\n\n  const elapsed = current - previous;\n\n  if (elapsed < milliSecondsPerMinute / 3) {\n    return \"just now\";\n  }\n\n  if (elapsed < milliSecondsPerMinute) {\n    return \"less than 1 min ago\";\n  } else if (elapsed < milliSecondsPerHour) {\n    return Math.round(elapsed / milliSecondsPerMinute) + \" min ago\";\n  } else if (elapsed < milliSecondsPerDay) {\n    return Math.round(elapsed / milliSecondsPerHour) + \" h ago\";\n  } else if (elapsed < milliSecondsPerMonth) {\n    return Math.round(elapsed / milliSecondsPerDay) + \" days ago\";\n  } else if (elapsed < milliSecondsPerYear) {\n    return Math.round(elapsed / milliSecondsPerMonth) + \" mo ago\";\n  } else {\n    return Math.round(elapsed / milliSecondsPerYear) + \" years ago\";\n  }\n}\n\nconst approute = 'https://lupareader.com'\nexport const links = {\n  author: (name) => (approute + '/user/' + name)\n}\n\nexport function timeDifferenceForDate(date) {\n  const now = new Date().getTime();\n  const updated = new Date(date).getTime();\n  return timeDifference(now, updated);\n}\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst countNested = (obj, prop) => obj[prop].reduce((accum, value) => accum + value[prop].length, 0) + obj[prop].length\n\nexport {countNested, urlpretty}\n\nexport function Fetch({stock, viewOption, render}) {\n    const [data, setData] = useState({speciesData: []})\n    const [requestError, setRequestError] = useState(null)\n\n\n    const fetcher = () => fetch('https://ghibliapi.herokuapp.com/species')\n        .then(res => res.json())\n        .then(res => setData({speciesData: res}))\n\n    useEffect(() => {\n        fetcher()\n        console.log('ran on stock change', data)\n    }, [requestError])\n    //[stock] is dependent value => rerender if changed\n\n\n    return render(data)\n}\n\nconst urlpretty = (target) => {\n    const a = target.split('https://');\n    const b = a[a.length - 1].split('www.');\n    return b[b.length - 1]\n}\n\n\n","import {gql} from \"apollo-boost\";\nimport {gqlRequest} from \"../components/gqlRequest\";\n//createReview is just the operationname you can see in your http request later\nconst CREATE_REVIEW_MUTATION = gql`\n    mutation createReview($title: String, $target: String!, $description: String!, $targetType: String) {\n        createReview(title: $title, target: $target, targetType: $targetType, description: $description) {\n            id\n            title\n            target\n            author {\n                id\n                name\n            }\n            description\n        }\n    }\n`;\n\nconst DELETE_REVIEW = gql`\n    mutation deleteReview($id: String!) {\n        deleteReview(id: $id) {\n            target\n            author {\n                name\n                id\n            }\n        }\n    }\n`\n\nconst CREATE_USER_MUTATION = gql`\n    mutation createUser($name: String!, $email: String!, $fibauid: String!) {\n        createUser(name: $name, email: $email, fibauid: $fibauid) {\n            id\n            name\n            email\n        }\n    }\n`;\n\nconst FOLLOW_GROUP = gql`\n    mutation followGroup($group: String!) {\n        followGroup(group: $group) {\n            name\n            id\n        }\n    }\n`;\nconst UNFOLLOW_GROUP = gql`\n    mutation unfollowGroup($group: String!) {\n        unfollowGroup(group: $group) {\n            name\n            id\n        }\n    }\n`;\n\nconst CREATE_GROUP_MUTATION = gql`\n    mutation createGroup($name: String!, $description: String!) {\n        createGroup(name: $name, description: $description) {\n            followers {\n                name\n            }\n            name\n            description\n        }\n    }\n`;\n\nconst createGroup = (name, description) => gqlRequest(CREATE_GROUP_MUTATION, {name, description});\nconst followGroup = (group) => gqlRequest(FOLLOW_GROUP, {group});\nconst unfollowGroup = (group) => gqlRequest(UNFOLLOW_GROUP, {group});\nconst createReview = (target, targetType, title, description) => gqlRequest(CREATE_REVIEW_MUTATION, {\n    target,\n    title,\n    description,\n    targetType\n});\nconst deleteReview = (id) => gqlRequest(DELETE_REVIEW, {id});\n\n\nexport {\n    createGroup,\n    createReview,\n    deleteReview,\n    unfollowGroup,\n    followGroup,\n    DELETE_REVIEW,\n    CREATE_GROUP_MUTATION,\n    CREATE_REVIEW_MUTATION,\n    CREATE_USER_MUTATION\n}","const subtle_button = {\n    cursor: \"pointer\",\n    fontStyle: \"underline\",\n    fontSize: \"1rem\",\n    textDecoration: \"underline\",\n    color: \"grey\"\n}\nconst infoStyle = {\n    fontSize: \"0.8rem\",\n    padding: \"1rem\",\n    color: \"darkgrey\"\n}\nconst btn_pink = {\n    background: \"darkblue\",\n    color: \"white\",\n    fontStyle: \"bold\",\n    padding: \"0.5rem\",\n    cursor: \"pointer\",\n    width: \"50%\",\n}\nconst btn_green = {\n    cursor: \"pointer\",\n    background: \"darkgreen\",\n    color: \"white\",\n    fontStyle: \"bold\",\n    padding: \"0.5rem\",\n    width: \"50%\",\n\n}\n\nexport {subtle_button, btn_green, btn_pink, infoStyle}\n","import React, {useState} from 'react'\nimport './reviews.css'\nimport {countNested, links, timeDifferenceForDate, urlpretty} from \"../utils\";\nimport {createReview, deleteReview} from \"../apis/mutations\";\nimport {subtle_button} from \"./styled/styles\";\n\nconst defaultGroup = \"alpha_testers\"\n\nexport default function ReviewThread({review, user, showmore = true}) {\n    const [expanded, setExpanded] = useState(false)\n    const [isPreview, setIsPreview] = useState(!showmore)\n    const totalcomments = countNested(review, 'comments');\n    return <>\n        <div key={review.id} className=\"textbubbles\">\n            <button className=\"nametag\" onClick={() => setIsPreview(!isPreview)}>{review.author.name}</button>\n            <span>{review.emoji && isNaN(review.emoji) ? String.fromCodePoint(review.emoji) : \"\"}</span>\n            {!isPreview && <>\n                <span className=\"reviewtitle\">{review.title || \"/\"}</span>\n                <span className=\"targettext\">{urlpretty(review.target) || \"/\"}</span>\n                <span style={{color: \"grey\", fontSize: \"0.7rem\"}}>{timeDifferenceForDate(review.updatedAt)}</span>\n                <br/>\n                <div style={{marginLeft: \"2rem\"}}>\n                <span className=\"reviewtext\">\n                    <span style={{\n                        background: \"purple\",\n                        color: \"white\",\n                        borderRadius: \"100px\",\n                        padding: \"0.1rem\",\n                        margin: \"0.2rem\"\n                    }}>{totalcomments}\n                    </span>\n                    {review.description}\n                    </span>\n                    <span style={subtle_button}> {review.groups.map(g => <div>{\"@\" + g.name + \" \"}</div>)}</span>\n                    <Commenter targetId={review.id}/>\n                    <span style={subtle_button}\n                          onClick={() => setExpanded(!expanded)}>\n                    {expanded ? \"  Hide\" : `  Show Opinions (${totalcomments})`}\n                    </span>\n                </div>\n            </>}\n        </div>\n        {expanded && review.comments.map(comment => <>\n                <div className=\"comment\" key={comment.id}>\n                    <Comment review={comment} user={user}/>\n                    <Commenter targetId={comment.id} text={'Reply'}/>\n\n                </div>\n                {comment.comments.map(reply => <div className=\"reply\" key={reply.id}>\n                        <Comment review={reply} user={user}/>\n                    </div>\n                )}\n                <br/>\n            </>\n        )}\n    </>\n\n}\n\n\nexport function Commenter({targetId, text = \"Comment\"}) {\n    const [typing, setTyping] = useState(null)\n    const [comment, setComment] = useState(\"\")\n    return <>\n        <div\n            style={subtle_button}\n            onClick={() => setTyping(true)}\n        >{text}</div>\n        {typing && <><textarea onChange={(ev) => setComment(ev.target.value)}\n                               value={comment}\n                               placeholder={comment || `${String.fromCodePoint(0x1F449)} leave a comment ? `}\n                               cols=\"20\" rows=\"3\"\n        />\n            <span style={subtle_button}\n                  onClick={() => {\n                      setTyping(false)\n                      createReview(targetId, \"review\", null, comment)\n                  }}> OK\n            </span>\n            <span style={subtle_button}\n                  onClick={() => setTyping(false)}> | Cancel\n            </span>\n        </>\n        }\n    </>\n}\n\nconst Comment = ({review, user}) => (<>\n        <a href={links.author(review.author.name)} className=\"nametag\">{review.author.name} {\"   \"}</a>\n        <span style={{background: \"#e2dede\", borderRadius: \"10px\", padding: \"0.2rem\"}}> {review.description} </span>\n        {user.id === review.author.id\n        && <span onClick={() => deleteReview(review.id)}\n                 style={{cursor: \"pointer\", color: \"red\", fontSize: \"0.6rem\", fontWeight: \"bolder\"}}>\n            {\"   X   \"}\n            </span>}\n    </>\n)\n\n","import React, {useState, useEffect} from 'react'\nimport Card from './Card'\nimport ReviewThread from \"./ReviewThread\";\n\nconst mockReviews = {\n    author: {name: \"goseph\"},\n    createdAt: Date.now() - 50000,\n    description: \"he sucks balls\",\n    emoji: \"0x0412\",\n    groups: [{name: \"shmallow\"}],\n    target: \"someid\",\n    targetType: \"webpage\"\n}\n\nconst ReviewList = ({reviews, user, showmore}) => reviews.map(review => <ReviewThread review={review} user={user} fullPreview={showmore}/>)\n\nexport {ReviewList}\nexport default function Reviews({reviews = []}) {\n    return <section style={{display: 'flex', flexWrap: 'wrap'}}>\n        {reviews.map(r => <Card>\n            <div>{r.title}</div>\n            <br/>\n            <figcaption>Info: {r.description}</figcaption>\n            <section>Author: {r.author.name}</section>\n            <div> Groups: {r.groups.map(g => <figcaption>{g.name}</figcaption>)} </div>\n        </Card>)}\n    </section>;\n}\n\n\n","import styled from 'styled-components'\n\nconst Header = styled.h1`\n  margin:0;\n  padding: ${p => p.primary ? \"0.5em\" : \"0.3em\"};\n  text-align: center;\n  background: ${p => p.primary ? \"black\" : \"darkcyan\"};\n  color: white;\n  // width: ${p => p.primary ? \"30vw\" : \"10vw\"};\n  font-weight: ${p => p.primary ? \"bold\" : \"400\"};\n  font-size: 1.3rem;\n   -webkit-box-shadow:0 2px 4px rgba(0, 0, 0, 0.3);\n  box-shadow:0 3px 2px rgba(0, 0, 0, 0.2);\n`\n\nexport default Header","import styled from 'styled-components'\n\nconst Tag = styled.div`\n  cursor: pointer;\n  margin: 0.5rem;\n  padding: 0.5rem;\n  background: darkorange;\n  display: inline-block;\n  color: white;\n`;\nexport default Tag","import React, {useEffect, useState} from \"react\";\n\nexport default function Querier({query, prop=null, children}) {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [ee, setee] = useState(false);\n    const [data, setData] = useState({});\n    const [done, setDone] = useState(false);\n\n    // const datax = await q(vars)\n\n    // console.log(\"data!!\", datax)\n    async function fetcher() {\n        let data = {};\n        try {\n            data = await query()\n        }\n        catch (error) {\n            setError(error)\n            return\n        }\n        console.log(\"DATAAA\", data)\n        setLoading(false)\n        setData(data)\n        setDone(true)\n    }\n\n    useEffect(() => {\n        fetcher();\n    }, [ee])\n\n    return (loading ? <div>...Loading</div>\n        : (done\n            ? children({error, data: (prop? data[prop]: data), loading})\n            : error ? (<div>{error.message}</div>) : <div>Something failed somewhere...</div>))\n}","import React, { useState } from \"react\";\nimport {GET_GROUP, GET_GROUP_BY_NAME, getGroupByName} from \"../apis/query\";\nimport Header from './styled/Header'\nimport Tag from \"./styled/Tag\";\nimport {ReviewList} from \"./Reviews\";\nimport Querier from '../apis/Querier'\n\n\n// import './styles.css'\n\nconst mockGroups = [\n    {\n        description: \"we are the synthetic biology group. Go suck a dx*AW\",\n\n    }\n]\n\nexport default function Group({ match, user, preview=false }) {\n  return (\n    <Querier query={() => getGroupByName(match.params.name)} prop={'groupByName'}>\n      {({ loading, error, data }) => {\n        if (loading) return \"Loading... (apparently GraphQL is slower than REST APIs...)\";\n        if (error) return `Error! ${error.message}`;\n        console.log(data, \"group\");\n        const group = data;\n        return <section>\n            <Header primary>{group.name}</Header>\n            <GroupDetails details={group} />\n            <br />\n            <br />\n            {!preview && <> <Header>Activity :: </Header>\n            <ReviewList reviews={group.reviews} showmore={true} user={user} />\n            </>}\n          </section>;\n      }}\n    </Querier>\n  );\n}\n\n//TODO also use for creating and updating group (just exchange button and validate form)\nfunction GroupDetails({ details }) {\n  //is inEditMdoe\n  const [editMode, toggleEditMode] = useState(false);\n\n  return (\n    <div>\n      <Header>Subscribers ({details.followers.length}): </Header>\n      <div>\n        {/* TODO: show details on click as popOver */}\n        {details.followers.map(f => <Tag onClick={() => window.location.replace('/user/'+f.name)}>@{f.name}</Tag>)}\n      </div>\n    </div>\n  );\n}\n","import styled from 'styled-components'\n\nconst Button = styled.button`\n    cursor: pointer;\n    color: white;\n   \n    background: turquoise;\n    \n     &:hover {\n    background: #786b99;\n  }\n  z-index: 5;\n    transition-duration: 700ms;\n    padding: 0.8em;\n    font-size: 1.5em;\n    font-weight: bold;\n     -webkit-box-shadow: 0 5px 12px rgba(0, 0, 0, 0.6);\n     box-shadow: 0 2px 3px rgba(0, 0, 0, 0.3);\n`\nexport default Button","import React from 'react';\nimport Button from './styled/Button'\nimport Header from './styled/Header'\n\nimport Card from './Card'\nimport {GET_GROUPS, getGroups} from \"../apis/query\";\nimport {followGroup, unfollowGroup} from \"../apis/mutations\";\nimport {countNested} from \"../utils\";\nimport {btn_green, btn_pink, infoStyle, subtle_button} from \"./styled/styles\";\nimport {history} from \"../index\";\nimport Querier from \"../apis/Querier\";\n\n// const gs = [{id: \"abc\"}, {id: \"def\"}]\n// const userRoles = [{group: {id: \"abc\"}, role: \"creator\"}, {group: {id: \"def\"}, role: \"admin\"}, {\n//     group: {id: \"jack\"},\n//     role: \"follower\"\n// }]\nconst sortGroupListingByRole_mutate = function (groups, userRoles) {\n    if (!userRoles) return groups\n    groups.forEach(g => {\n        const match = userRoles.find(role => role.group ? role.group.id === g.id : false);\n        let role = \"\"\n        if (match) {\n            role = match.role;\n        }\n        g.membership = role;\n    })\n\n    return groups;\n}\n\n//TODO => search functionality ... well firefox...\nexport default function Groups({user}) {\n    if (!user) {user = {roles: []}}\n    return (\n        <>\n            <Header>Lupa Groups </Header>\n\n            <Button onClick={() => history.push('/createGroup') }>\n                Create Group\n            </Button>\n            <Querier query={getGroups}>\n                {({loading, error, data}) => {\n                    if (loading) return \"Loading...\";\n                    if (error) return `Error! ${error.message}`;\n                    return <section style={{display: 'flex', flexWrap: 'wrap'}}>\n                        {sortGroupListingByRole_mutate(data.groups, user.roles)\n                            .sort(g => g.membership ? -1 : 1)\n                            .map(g => <Card>\n                            <span style={subtle_button} onClick={() => history.push(`/group/${g.name}`)}>{g.name}</span>\n                            <figcaption style={infoStyle}>{g.description}</figcaption>\n                            <section>Members: {g.followers.length}</section>\n                            <section>Activity: {g.reviews.reduce((acc, val) => acc + countNested(val, \"comments\"), 0) + g.reviews.length}</section>\n                            <div style={btn_pink}>{g.membership}</div>\n                                {g.membership\n                                    ? <button onClick={() => unfollowGroup(g.id)} style={btn_green}>Leave</button>\n                                    : <button onClick={() => followGroup(g.id)} style={btn_green}>Join</button>}\n                        </Card>)}\n                    </section>\n                }}\n            </Querier>\n        </>)\n}","import React, { useState } from \"react\";\nimport {GET_USER_BY_NAME, getUserByName} from \"../apis/query\";\nimport Header from './styled/Header'\nimport Tag from \"./styled/Tag\";\nimport {ReviewList} from \"./Reviews\";\nimport Querier from \"../apis/Querier\";\n\n\n// import './styles.css'\n\nexport default function UserView({ match, user }) {\n  return (\n    <Querier query={getUserByName} variables={{ name: match.params.name }}>\n      {({ loading, error, data }) => {\n        if (loading) return \"Loading...\";\n        if (error) return `Error! ${error.message}`;\n        console.log(data, \"group\");\n        const user = data.userByName;\n        return <>\n            <Header primary>{user.name}</Header>\n\n            <Header>Activity :: </Header>\n            <ReviewList reviews={user.reviews} user={user} />\n            <br />\n            <br />\n            <Header>Groups :: </Header>\n            {user.follows && user.follows.map(g => <Tag>{g.name}</Tag>)}\n          </>;\n      }}\n    </Querier>\n  );\n}\n\n// /[^a-zA-Z0-9\\-\\/]/.test( TCode )\n\n{\n  /*<Paper style={{maxHeight: 200, overflow: 'auto'}}>\n    <List>\n        ...\n    </List>\n</Paper>*/\n}\n\nfunction ReviewScroll({ reviews }) {\n  return <div />;\n}\n\n//TODO also use for creating and updating group (just exchange button and validate form)\nfunction GroupDetails({ details }) {\n  //is inEditMdoe\n  const [editMode, toggleEditMode] = useState(false);\n\n  return (\n    <div>\n      <Header>Subscribers ({details.followers.length}): </Header>\n      <div>\n        {/* TODO: show details on click as popOver */}\n        {details.followers.map(f => <Tag>@{f.name}</Tag>)}\n      </div>\n    </div>\n  );\n}\n","import React, {useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport \"./nav_style.css\"\n\nexport default function Nav({history}) {\n    return  <nav>\n        <Link to='/'>HOME</Link>\n        <Link to='/account'>ACCOUNT</Link>\n        <Link to='/about'>ABOUT</Link>\n        <Link to='/groups'>GROUPS</Link>\n    </nav>\n}","import React, { Component } from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport api from \"../../apis/api\";\n\nconst ForgotPasswordMeta = withFormik({\n  mapPropsToValues: () => ({ email: \"\" }),\n  validationSchema: Yup.object().shape({\n    email: Yup.string()\n      .email(\"Email not valid\")\n      .required(\"Email is required\")\n  }),\n  handleSubmit(\n    { email } /* form values */,\n    { setValues, resetForm, setSubmitting } /* formikExtras */\n  ) {\n    api.sendPasswordResetEmail(email).then(res => {\n      setValues({ sent: `Reset email sent to: ${email}` });\n      setSubmitting(false);\n    });\n    // resetForm()\n  }\n});\n\nconst ForgotPassword = ({ values, errors, touched, isSubmitting }) => (\n  <>\n    <div className=\"title\">Forgot password</div>\n    <Form className=\"login-form\">\n      <div className=\"credentials\">\n        <Field type=\"email\" name=\"email\" placeholder={\"your email\"} />\n        {/* TODO: This is error.email is somehow firing, even with email  */}\n        {/* {touched.email && errors.email && <p>{errors.email}</p>} */}\n      </div>\n      {errors.api && <p>{`There was an error: ${errors.api}`}</p>}\n      {values.sent && <p>{values.sent}</p>}\n\n      <button type=\"submit\" title=\"Continue\" disabled={isSubmitting}>\n        SUBMIT\n      </button>\n    </Form>\n  </>\n);\n\nexport default ForgotPasswordMeta(ForgotPassword);\n","import React, {useState} from \"react\";\n\nexport default function AccountDetails({user}) {\n\n    const {id, name, follows, description, email, reviews} = user;\n\n    return <>\n        <div>\n            {name}\n        </div>\n        <div>{email} </div>\n        <div>\n            About : {description}\n        </div>\n        <div>\n            Review Count: {reviews.length}\n        </div>\n    </>\n\n}","import React, { useState, useEffect } from \"react\";\n\nimport LoginPage from './LoginPage'\nimport RegistrationPage from \"./RegistrationPage\";\nimport ForgotPassword from \"./ForgotPassword\";\nimport AccountDetails from \"./AccountDetails\";\n\nexport default function AccountPage({ lupa_user }) {\n    const [stage, setStage] = useState(lupa_user ? \"account\" : \"register\")\n\n\n\n    useEffect(() => {\n        if (lupa_user) {setStage('account')}\n    }, [lupa_user])\n    const options = {\n        account: null,\n        register: \"login\",\n        login: \"register\",\n    }\n\n    let choice = options[stage]\n\n    return (<>\n        {stage === 'account' && <AccountDetails user={lupa_user}/>}\n        {stage === 'register' && <RegistrationPage/>}\n        {stage === 'login' && <><LoginPage/><button onClick={() => setStage('forgot')}> Forgot Password</button></>}\n        {stage === 'forgot' && <ForgotPassword/>}\n        {choice && <button onClick={() => setStage(choice)}> {choice} </button>}\n    </>)\n}\n","import React, {useState} from 'react';\n\nexport default function About() {\n    return (<div><h1>Good you are here</h1>\n        <p>\n            *) Lupa is about finding and discussing cool resources on the web together where they are.\n            Right now it's version 0.007 ;) Bugs, sometimes slow loading speeds etc.\n            <br/>\n            <br/>\n        </p>\n        <p>\n            *) When you come across an article/content (url, really) that was\n            reviewed by someone in that group\n            you'll see that on the ICON at the bottom of your screen\n            <br/>\n            <br/>\n            *) I made this to connect friends and people through\n            their real (maybe intellectual) interests and to get the most diverse\n            opinions\n        </p>\n        {/*<img style={styles.img} src={comment_howto2} alt={\"screenshot of how to comment\"}/>*/}\n        <p>\n            <br/>\n            <br/>\n            *) All your thoughts on a content show up exactly when someone comes across the\n            place\n            on the web (url). Unlike sharing on some platform your input won't be lost at\n            the bottom of some chat feed the day after!\n            <br/>\n            <br/>\n            *) Data only gets stored when you submit. There is no background data\n            processing going on otherwise (except for querying the Database if there are\n            reviews for the URL you're at)\n        </p></div>)\n}\n","import React, {useState} from 'react'\nimport {withFormik, Form, Field} from \"formik\";\nimport * as Yup from \"yup\";\n\nimport {capitalizeFirstLetter} from \"../utils\";\nimport {createGroup} from \"../apis/mutations\";\nimport {getGroupByName} from \"../apis/query\";\n\nconst CreateGroup = ({touched, values, errors}) => {\n    const {name, description} = values;\n    return <>\n        <div className=\"title\">Create a Group</div>\n        <Form>\n            <div>\n                <Field name=\"name\" value={name.trim().toLowerCase()} placeholder={\"group name. lowercased. no spaces\"}/>\n                {errors.name && <div>{errors.name}</div>}\n\n                <Field style={{width: \"300px\"}} name=\"description\" value={description} placeholder={\"Say a little bit about your group\"}/>\n                {touched.description && errors.description && <div>{errors.description}</div>}\n\n            </div>\n            <div className=\"error\"/>\n            {errors.submitter && <p>{errors.submitter}</p>}\n\n            <button type=\"submit\" title=\"Create Group\" disabled={!description || !name}>\n                Submit\n            </button>\n        </Form>\n    </>;\n};\nconst CreateGroupMeta = withFormik({\n    mapPropsToValues: () => ({\n        name: \"\",\n        description: \"\",\n    }),\n    validationSchema: Yup.object().shape({\n        name: Yup.string()\n            .required(\"Your group needs a display name\")\n            .min(3, \"minimum 3 chars\")\n            .max(16, \"20 characters is the limit right now\")\n            .matches(/^([a-z\\d]+_)*[a-z\\d]+$/i, \"no weird signs pls\"),\n        description: Yup.string()\n            .required(\"Put a group description there\")\n            .min(10, \"Tell me a bit more... about the group\")\n            .min(80, \"80 characters max for now. Thanks\")\n    }),\n    async handleSubmit(\n        {description, name} /* form values */,\n        {resetForm, setErrors, setSubmitting} /* formikExtras */\n    ) {\n        try {\n            const data = await getGroupByName(name);\n            console.log(data, \"getname\");\n            if (data.groupByName) {\n                setErrors({submitter: \"Groupname is taken :( \"});\n                return;\n            }\n        } catch (error) {\n            setErrors({submitter: error.message});\n            return;\n        }\n\n        try {\n            const data = await createGroup(name, description);\n            setErrors({submitter: `Group ${name} created!`});\n        } catch (error) {\n            setErrors({submitter: error.message});\n        }\n\n        setSubmitting(false);\n    }\n});\n\nexport default CreateGroupMeta(CreateGroup);\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index_style.css\";\n// import registerServiceWorker from \"./registerServiceWorker\";\nimport AuthMonitor from \"./components/AuthMonitor\";\nimport {Provider, Subscribe} from \"unstated\";\nimport Apollo from './components/Apollo'\nimport LoginPage from './components/account/LoginPage'\nimport RegistrationPage from \"./components/account/RegistrationPage\";\nimport Home from './components/Home'\nimport {Router, Route, Switch} from 'react-router-dom';\nimport createBrowserHistory from 'history/createBrowserHistory';\nimport GroupView from './components/GroupView'\nimport Groups from \"./components/Groups\";\nimport UserView from \"./components/UserView\";\nimport Nav from './components/Nav';\nimport AccountPage from './components/account/AccountPage'\nimport About from './components/About'\nimport CreateGroup from './components/CreateGroup'\n\nimport {ReviewList} from \"./components/Reviews\";\nimport {getReviewsForTarget, getReviews, getReviewsForUserGroups} from \"./apis/query\";\nimport Querier from \"./apis/Querier\";\n\nconst history = createBrowserHistory()\nexport {history}\n//import Formiks => account, register, forgot PW;\n{/*</GetReviews>*/\n}\n{/*<Apollo idToken={auth.state.idToken}>*/\n}\n\nReactDOM.render(\n    <Router history={history}>\n        <Provider>\n            <Subscribe to={[AuthMonitor]}>\n                {auth => (<React.Fragment>\n                    <Nav/>\n                    <Switch>\n                        <Route exact path=\"/\"\n                               component={(props) => <Querier {...props} query={getReviews} prop={'reviews'}>\n                                   {state => {\n\n                                       return <div>\n                                           <h1>All thoughts we placed</h1>\n                                           <ReviewList reviews={state.data} user={auth.state.lupa_user}\n                                                          showmore={true}/></div>\n                                   }\n                                   }\n                               </Querier>}/>\n                        <Route exact path=\"/about\" component={About}/>\n                        <Route exact path=\"/groups\" component={() => <Groups user={auth.state.lupa_user}/>}/>\n                        {/*<Route exact path=\"/reviews/:type?/:target?\" component={() => <GetReviews><Reviews /></GetReviews>}/>*/}\n                        <Route exact path=\"/creategroup\" component={CreateGroup}/>\n                        <Route exact path=\"/thread\"\n                               component={() => <Querier query={() => getReviewsForTarget(\"whoooores\")}\n                                                         prop={'reviewsForTarget'}>\n                                   {state => {\n                                       console.log(\"STTAET\", state)\n\n                                       return <ReviewList reviews={state.data} user={auth.state.lupa_user}/>\n                                   }\n                                   }\n                               </Querier>}\n                        />\n                        <Route exact path=\"/userreviews\" component={() => <>\n                            <Querier query={getReviewsForUserGroups} prop={'reviewsForUserGroups'}>\n                                {state => {\n                                    console.log(\"STTAET\", state)\n\n                                    return <ReviewList reviews={state.data} user={auth.state.lupa_user}/>\n                                }\n\n                                }\n                            </Querier></>}\n\n                        />\n                        <Route exact path=\"/account\" component={() => <AccountPage\n                            user={auth.state.user}\n                            lupa_user={auth.state.lupa_user}\n                        />}/>\n                        <Route exact path=\"/register\" component={RegistrationPage}/>\n                        <Route exact path=\"/user/:name\"\n                               component={(props) => <UserView {...props} user={auth.state.lupa_user}/>}/>\n\n                        <Route exact path=\"/group/:name\"\n                               component={(props) => <GroupView {...props} user={auth.state.lupa_user}/>}/>\n                        <Route\n                            component={() => (\n                                <div>Couldn't find the page/url you're looking for</div>\n                            )}\n                        />\n                    </Switch>\n                </React.Fragment>)}\n            </Subscribe>\n        </Provider>\n    </Router>,\n    document.getElementById(\"root\")\n);\n// registerServiceWorker();\n"],"sourceRoot":""}